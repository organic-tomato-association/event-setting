version: 2.1
executors:
  default:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
jobs:
  eslint:
    executor:
      name: default
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-eslint-{{ checksum "package.json" }}
            - v1-dependencies-eslint-
      - run:
          name: 'npm install'
          command: |
            npm install
            npm install eslint babel-eslint
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-eslint-{{ checksum "package.json" }}
      - run:
          name: 'eslint'
          command: |
            mkdir -p ~/repo/test-reports/eslint
            node_modules/.bin/eslint . --ext .js --ext .jsx --format junit --output-file ~/repo/test-reports/eslint/results.xml
      - store_test_results:
          path: ~/repo/test-reports
  build-job:
    executor:
      name: default
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: 'npm install'
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: 'Create Config File'
          command: |
            echo "export default {" > src/firebase/config.js
            echo "apiKey: '$FIREBASE_API_KEY'," >> src/firebase/config.js
            echo "authDomain: '$FIREBASE_AUTH_DOMAIN'," >> src/firebase/config.js
            echo "databaseURL: '$FIREBASE_DATABASE_URL'," >> src/firebase/config.js
            echo "projectId: '$FIREBASE_PROJECT_ID'," >> src/firebase/config.js
            echo "storageBucket: '$FIREBASE_STORAGE_BUCKET'," >> src/firebase/config.js
            echo "messagingSenderId: '$FIREBASE_MESSAGEING_SENDER_ID'," >> src/firebase/config.js
            echo "};" >> src/firebase/config.js
            cp .firebaserc.example .firebaserc
            cp database.rules.json.example database.rules.json
      - run:
          name: 'Build Client Code'
          command: npm run build
      - persist_to_workspace:
          root: build
          paths:
            - .
  slack-notification-approval-pending:
    executor:
      name: default
    steps:
      - run:
          name: 'send notification to slack'
          command: |
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\": \"Please approve workflow from <https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}|here>.\"}" \
              $SLACK_WEBHOOK_URL
  slack-notification-approved:
    executor:
      name: default
    steps:
      - run:
          name: 'send notification to slack'
          command: |
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\": \"Approved workflow from <https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}|here>.\"}" \
              $SLACK_WEBHOOK_URL
            curl -X PUT https://pixe.la/v1/users/wakuwakup/graphs/es/increment -H 'X-USER-TOKEN:${PIXELA_TOKEN}' -H 'Content-Length:0'
  deploy-job:
    executor:
      name: default
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - attach_workspace:
          at: build
      - run:
          name: 'Deploy to Hosting'
          command: node_modules/.bin/firebase deploy --only hosting --project "$FIREBASE_PJ" --token "$FIREBASE_TOKEN"

workflows:
  test-and-deploy:
    jobs:
      - eslint
      - build-job:
          requires:
            - eslint
      - hold:
          type: approval
          requires:
            - build-job
          filters:
            branches:
              only:
                - master
      - slack-notification-approval-pending:
          requires:
            - build-job
          filters:
            branches:
              only:
                - master
      - deploy-job:
          requires:
            - hold
      - slack-notification-approved:
          requires:
            - hold
